generator client { provider = "prisma-client-js" }
datasource db { provider = "sqlite"; url = env("DATABASE_URL") }

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  role          UserRole @default(USER)
  firstName     String?
  lastName      String?
  bio           String?
  avatarUrl     String?
  location      String?
  phone         String?
  isPro         Boolean  @default(false)
  proName       String?
  proSiret      String?  @unique
  kycVerified   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  pets          Pet[]
  listings      Listing[]
  alerts        PetAlert[]
  matingOffers  MatingOffer[]
  messagesSent  Message[] @relation("messagesSent")
  messagesRecv  Message[] @relation("messagesRecv")
  favorites     Favorite[]
  reports       Report[]  @relation("reportsByUser")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

model Pet {
  id           String   @id @default(cuid())
  ownerId      String
  owner        User     @relation(fields: [ownerId], references: [id])
  name         String
  species      Species
  breed        String?
  sex          Sex
  birthDate    DateTime?
  pedigreeId   String?
  vaccination  String?
  description  String?
  photos       Photo[]
  heatEvents   HeatEvent[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  matingOffers MatingOffer[]
}

enum Species {
  DOG
  CAT
  BIRD
  RABBIT
  RODENT
  REPTILE
  HORSE
  OTHER
}

enum Sex {
  MALE
  FEMALE
}

model Photo {
  id         String  @id @default(cuid())
  url        String
  petId      String?
  listingId  String?
  alertId    String?
  createdAt  DateTime @default(now())
}

model HeatEvent {
  id        String   @id @default(cuid())
  petId     String
  pet       Pet      @relation(fields: [petId], references: [id])
  startAt   DateTime
  endAt     DateTime?
  notes     String?
  createdAt DateTime @default(now())
}

model MatingOffer {
  id          String   @id @default(cuid())
  petId       String
  pet         Pet      @relation(fields: [petId], references: [id])
  title       String
  description String?
  price       Int?
  city        String?
  geoLat      Float?
  geoLng      Float?
  status      OfferStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  requests    MatingRequest[]
}

enum OfferStatus {
  ACTIVE
  PAUSED
  CLOSED
}

model MatingRequest {
  id           String   @id @default(cuid())
  offerId      String
  offer        MatingOffer @relation(fields: [offerId], references: [id])
  requesterId  String
  requester    User     @relation(fields: [requesterId], references: [id])
  message      String?
  status       RequestStatus @default(PENDING)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model PetAlert {
  id          String   @id @default(cuid())
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id])
  type        AlertType
  title       String
  description String?
  city        String?
  geoLat      Float?
  geoLng      Float?
  status      AlertStatus @default(OPEN)
  petDesc     String?
  photos      Photo[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum AlertType {
  LOST
  FOUND
  SIGHTING
}

enum AlertStatus {
  OPEN
  RESOLVED
  ARCHIVED
}

model Listing {
  id             String   @id @default(cuid())
  sellerId       String
  seller         User     @relation(fields: [sellerId], references: [id])
  title          String
  description    String?
  price          Int
  species        Species?
  breed          String?
  city           String?
  geoLat         Float?
  geoLng         Float?
  isProfessional Boolean  @default(false)
  status         ListingStatus @default(ACTIVE)
  photos         Photo[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum ListingStatus {
  ACTIVE
  PAUSED
  SOLD
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  readAt     DateTime?
  sender     User     @relation("messagesSent", fields: [senderId], references: [id])
  receiver   User     @relation("messagesRecv", fields: [receiverId], references: [id])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  type      FavType
  refId     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  @@unique([userId, type, refId])
}

enum FavType {
  PET
  LISTING
  MATING
  ALERT
  USER
}

model Report {
  id         String   @id @default(cuid())
  reporterId String
  targetType ReportTarget
  targetId   String
  reason     String
  createdAt  DateTime @default(now())
  reporter   User     @relation("reportsByUser", fields: [reporterId], references: [id])
}

enum ReportTarget {
  USER
  PET
  LISTING
  MATING
  ALERT
  MESSAGE
  PHOTO
}
